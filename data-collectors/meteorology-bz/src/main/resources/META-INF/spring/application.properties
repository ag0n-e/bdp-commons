#### CONFIGURATION OF YOUR PROJECT ####

# Define any property you need for your project, do not configure things inside classes.
# Keeping them here, gives us an overview on what is configurable for this data collector.
# Please describe each property with a short sentence.

# The origin of our data set. Who is responsible for what we retrieve?
app.origin=SIAG

# How often does the the data source update their measurements (in seconds)?
# es. 600 = 10*60 = 10 minutes
app.period=600

# Should the collector send only new data to the Data Hub (boolean)?
# The service returns always measurements of last 24 hours (4 measures per hour, so 96 measurements each call)
# If not set the default is TRUE
#   true  = check in the Data Hub last saved record for each station and avoid sending data already pushed
#   false = send to the Data Hub all records read from the service
app.checkDateOfLastRecord = true

# Should the collector push measurements for all stations in a single call or split data and send measurements for each station separately
# Set this parameter to TRUE if the amount of data for all stations becomes too big to be pushed in a single call
# If not set the default is FALSE
#   true  = measurements of each station is pushed separately
#   false = measurements of each station are collected and then pushed in a single call
app.pushDataSingleStation = true

# Endpoint parameters for the List of Meteo Stations
# http://dati.retecivica.bz.it/services/meteo/v1/stations
endpoint.stations.method=GET
endpoint.stations.protocol=https
endpoint.stations.host=dati.retecivica.bz.it
endpoint.stations.port=
endpoint.stations.path=services/meteo/v1/stations

# Endpoint parameters for last measurements for all Stations
# http://dati.retecivica.bz.it/services/meteo/v1/sensors
endpoint.sensors.method=GET
endpoint.sensors.protocol=https
endpoint.sensors.host=dati.retecivica.bz.it
endpoint.sensors.port=
endpoint.sensors.path=services/meteo/v1/sensors

# Endpoint parameters for measurements of each Meteo Station and each data type
# If the service needs request params, the parameters "endpoint.measurements.param.i.param_name" and "endpoint.measurements.param.i.station_attr_name" must be filled.
#   "param_name"        is the name of the request param
#   "station_attr_name" is the attribute of the station that holds the value 
# examples:
# http://dati.retecivica.bz.it/services/meteo/v1/timeseries?output_format=JSON&station_code=43200MS&sensor_code=LT&date_from=201607121030&date_to=201608121320
endpoint.measurements.method=GET
endpoint.measurements.protocol=http
endpoint.measurements.host=dati.retecivica.bz.it
endpoint.measurements.port=
endpoint.measurements.path=services/meteo/v1/timeseries
endpoint.measurements.param.0.param_name=output_format
endpoint.measurements.param.0.param_value=JSON
endpoint.measurements.param.1.param_name=station_code
endpoint.measurements.param.1.station_attr_name=id
endpoint.measurements.param.2.param_name=sensor_code
endpoint.measurements.param.2.sensor_attr_name=TYPE
endpoint.measurements.param.3.param_name=date_from
endpoint.measurements.param.3.function_name=LAST_DATE
endpoint.measurements.param.4.param_name=date_to
endpoint.measurements.param.4.function_name=CURR_DATE

# If no historic data are found in Open Data Hub, start from the following date (format is yyyyMMddHHmm)
app.min_date_from=201901010000
# Fetch data at chunks. This parameter indicates how many days to fetch from the meteo service (integer)
app.fetch_period=7

# Station fixed attribute values as seen in bdp-core/dal derived from the class "ParkingStation"
app.station.type=MeteoStation
